{"mappings":"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","sources":["src/index.tsx","src/internationalizedArray.ts","src/components/InternationalizedArrayInput.tsx","src/components/Table.tsx","src/components/Feedback.tsx","src/components/getToneFromValidation.ts"],"sourcesContent":["export * from './internationalizedArray'\n\n/**\n * Because of the complexity of the field, there's no utility currently to using the plugin framework\n * We need to register:\n * - an array field which\n * - only has a single object field with\n * - a single inner field and\n * - an array of languages\n * ...this is easier with a helper function\n */\n\n// import React from 'react'\n// import {createPlugin} from 'sanity'\n\n// import InternationalizedArrayInput from './components/InternationalizedArrayInput'\n// import {PluginConfig} from './types'\n\n// const CONFIG_DEFAULT = {languages: []}\n\n// export const internationalizedArray = createPlugin<PluginConfig>((config = CONFIG_DEFAULT) => {\n//   return {\n//     name: 'sanity-plugin-internationalized-array',\n//     form: {\n//       renderInput: (inputProps: unknown, next: unknown) => {\n//         if (\n//           config.languages.length &&\n//           inputProps?.schemaType?.jsonType === 'array' &&\n//           inputProps?.schemaType?.options.i18n === true\n//         ) {\n//           if (inputProps.schemaType.of.length > 1) {\n//             return <div>Cannot have more than one field type in the array</div>\n//           }\n\n//           if (inputProps.schemaType.of[0].jsonType !== 'object') {\n//             return <div>Single Field in the Array must be an object</div>\n//           }\n\n//           if (inputProps.schemaType.of[0].fields[0].name !== 'value') {\n//             return <div>Single Field in the Object must be named `value`</div>\n//           }\n\n//           console.log({inputProps})\n//           return <InternationalizedArrayInput inputProps={inputProps} {...config} />\n//         }\n\n//         return null\n//       },\n//     },\n//   }\n// })\n","import {defineField, FieldDefinition, SchemaType} from 'sanity'\n\nimport InternationalizedArrayInput from './components/InternationalizedArrayInput'\nimport {AllowedType, ArrayConfig, Language, Value} from './types'\n\nconst CONFIG_DEFAULT = {name: `title`, type: `string` as AllowedType, languages: []}\n\nexport function internationalizedArray(config: ArrayConfig = CONFIG_DEFAULT): FieldDefinition {\n  const {name, type, languages} = config\n\n  const configValidation = Array.isArray(config?.validation)\n    ? config.validation\n    : [config?.validation]\n\n  return defineField({\n    name,\n    title: config?.title ?? undefined,\n    group: config?.group ?? undefined,\n    hidden: config?.hidden ?? undefined,\n    readOnly: config?.readOnly ?? undefined,\n    type: 'array',\n    components: {input: InternationalizedArrayInput},\n    options: {languages},\n    of: [\n      {\n        type: 'object',\n        fields: [\n          {\n            name: 'value',\n            type,\n          },\n        ],\n        preview: {\n          select: {title: 'value', key: '_key'},\n          prepare({title, key}) {\n            return {\n              title,\n              subtitle: key.toUpperCase(),\n            }\n          },\n        },\n      },\n    ],\n    validation: (Rule) => [\n      languages?.length ? Rule.max(languages.length) : null,\n      Rule.custom<Value[]>((value, context) => {\n        const {languages: contextLanguages}: {languages: Language[]} = context?.type?.options ?? {}\n\n        const nonLanguageKeys = value?.length\n          ? value.filter((item) => !contextLanguages.find((language) => item._key === language.id))\n          : []\n\n        if (nonLanguageKeys.length) {\n          return {\n            message: `Array item keys must be valid languages registered to the field type`,\n            paths: nonLanguageKeys.map((item) => ({_key: item._key})),\n          }\n        }\n\n        // Ensure there's no duplicate `language` fields\n        type KeyedValues = {\n          [key: string]: Value[]\n        }\n\n        const valuesByLanguage = value?.length\n          ? value\n              .filter((item) => Boolean(item?._key))\n              .reduce((acc, cur) => {\n                if (acc[cur._key]) {\n                  return {...acc, [cur._key]: [...acc[cur._key], cur]}\n                }\n\n                return {\n                  ...acc,\n                  [cur._key]: [cur],\n                }\n              }, {} as KeyedValues)\n          : {}\n\n        const duplicateValues = Object.values(valuesByLanguage)\n          .filter((item) => item?.length > 1)\n          .flat()\n\n        if (duplicateValues.length) {\n          return {\n            message: 'There can only be one field per language',\n            paths: duplicateValues.map((item) => ({_key: item._key})),\n          }\n        }\n\n        return true\n      }),\n      ...configValidation,\n    ],\n  })\n}\n","import React, {useCallback, useMemo} from 'react'\nimport {\n  PatchEvent,\n  ArrayOfObjectsInputProps,\n  MemberItem,\n  unset,\n  insert,\n  set,\n  setIfMissing,\n  FormFieldValidationStatus,\n} from 'sanity/form'\nimport {Box, Button, Flex, Grid, Label, Stack} from '@sanity/ui'\n\nimport {Language, Value} from '../types'\nimport {Table, TableCell, TableRow} from './Table'\nimport {AddIcon, RemoveIcon, RestoreIcon} from '@sanity/icons'\nimport Feedback from './Feedback'\nimport {getToneFromValidation} from './getToneFromValidation'\n\nexport type LocationInputProps = ArrayOfObjectsInputProps<Value>\n\nexport default function InternationalizedArrayInput(props: LocationInputProps) {\n  const {members, value, schemaType, onChange} = props\n  console.log(props)\n  const readOnly = typeof schemaType.readOnly === 'boolean' ? schemaType.readOnly : false\n  const {options} = schemaType\n\n  const languages: Language[] = useMemo(() => options?.languages ?? [], [options])\n\n  const handleAddLanguage = useCallback(\n    (languageId?: string) => {\n      // Create new items\n      const newItems = languageId\n        ? // Just one for this language\n          [{_key: languageId}]\n        : // Or one for every missing language\n          languages\n            .filter((language) =>\n              value?.length ? !value.find((v) => v._key === language.id) : true\n            )\n            .map((language) => ({_key: language.id}))\n\n      // Insert new items in the correct order\n      const languagesInUse = value?.length ? value.map((v) => v) : []\n\n      const insertions = newItems.map((item) => {\n        // What's the original index of this language?\n        const languageIndex = languages.findIndex((l) => item._key === l.id)\n\n        // What languages are there beyond that index?\n        const remainingLanguages = languages.slice(languageIndex + 1)\n\n        // So what is the index in the current value array of the next language in the language array?\n        const nextLanguageIndex = languagesInUse.findIndex((l) =>\n          remainingLanguages.find((r) => r.id === l._key)\n        )\n\n        // Keep local state up to date incase multiple insertions are being made\n        if (nextLanguageIndex < 0) {\n          languagesInUse.push(item)\n        } else {\n          languagesInUse.splice(nextLanguageIndex, 0, item)\n        }\n\n        return nextLanguageIndex < 0\n          ? // No next language (-1), add to end of array\n            insert([item], 'after', [nextLanguageIndex])\n          : // Next language found, insert before that\n            insert([item], 'before', [nextLanguageIndex])\n      })\n\n      onChange([setIfMissing([]), ...insertions])\n    },\n    [languages, onChange, value]\n  )\n\n  const handleUnsetByKey = useCallback(\n    (_key) => {\n      onChange(unset([{_key}]))\n    },\n    [onChange]\n  )\n\n  const handleInnerValueChange = useCallback(\n    (patchEvent: PatchEvent, _key: string) => {\n      const inputValue = patchEvent.patches[0]?.value\n      const inputPath = [{_key}, `value`]\n\n      onChange(inputValue ? set(inputValue, inputPath) : unset(inputPath))\n    },\n    [onChange]\n  )\n\n  // TODO: This is lazy, reordering and re-setting the whole array – it could be surgical\n  const handleRestoreOrder = useCallback(() => {\n    if (!value?.length) {\n      return\n    }\n\n    // Create a new value array in the correct order\n    // This would also strip out values that don't have a language as the key\n    const updatedValue = value\n      .reduce((acc, v) => {\n        const newIndex = languages.findIndex((l) => l.id === v?._key)\n\n        if (newIndex) {\n          acc[newIndex] = v\n        }\n\n        return acc\n      }, [] as Value[])\n      .filter(Boolean)\n\n    onChange(set(updatedValue))\n  }, [languages, onChange, value])\n\n  const allKeysAreLanguages = useMemo(() => {\n    return value?.every((v) => languages.find((l) => l?.id === v?._key))\n  }, [value, languages])\n\n  // Check languages are in the correct order\n  const languagesOutOfOrder = useMemo(() => {\n    if (!value?.length) {\n      return []\n    }\n\n    const languagesInUse = languages.filter((l) => value.find((v) => v._key === l.id))\n\n    return value\n      .map((v, vIndex) => (vIndex === languagesInUse.findIndex((l) => l.id === v._key) ? null : v))\n      .filter(Boolean)\n  }, [value, languages])\n\n  const languagesAreValid = useMemo(\n    () => languages?.length && languages.every((item) => item.id && item.title),\n    [languages]\n  )\n\n  if (!languagesAreValid) {\n    return <Feedback />\n  }\n\n  return (\n    <Stack space={2}>\n      {members?.length > 0 ? (\n        <Table>\n          <tbody>\n            {members.map((member) => (\n              <TableRow\n                key={member.key}\n                tone={\n                  member?.item?.validation?.length > 0\n                    ? getToneFromValidation(member.item.validation)\n                    : undefined\n                }\n              >\n                <TableCell style={{verticalAlign: 'bottom'}}>\n                  <Box paddingY={3} paddingRight={2}>\n                    <Label muted size={1}>\n                      {member.key}\n                    </Label>\n                  </Box>\n                </TableCell>\n                <TableCell paddingRight={2} style={{width: `100%`}}>\n                  <MemberItem {...props} member={member} />\n                </TableCell>\n                <TableCell style={{verticalAlign: 'bottom'}}>\n                  <Flex align=\"center\" justify=\"flex-end\" gap={3}>\n                    {/* Possibly unncessary, validation shows up in <MemberItem /> */}\n                    {member.item.validation.length > 0 ? (\n                      <Box paddingLeft={2}>\n                        <FormFieldValidationStatus validation={member.item.validation} />\n                      </Box>\n                    ) : null}\n                    <Button\n                      mode=\"ghost\"\n                      icon={RemoveIcon}\n                      tone=\"critical\"\n                      disabled={typeof readOnly === 'boolean' ? readOnly : false}\n                      onClick={() => handleUnsetByKey(member.key)}\n                    />\n                  </Flex>\n                </TableCell>\n              </TableRow>\n            ))}\n          </tbody>\n        </Table>\n      ) : null}\n\n      {languagesOutOfOrder.length > 0 && allKeysAreLanguages ? (\n        <Button\n          tone=\"caution\"\n          icon={RestoreIcon}\n          onClick={() => handleRestoreOrder()}\n          text=\"Restore order of languages\"\n        />\n      ) : null}\n\n      {value && value.length < languages.length ? (\n        <Stack space={2}>\n          {/* No more than 5 columns */}\n          <Grid columns={Math.min(languages.length, 5)} gap={2}>\n            {languages.map((language) => (\n              <Button\n                key={language.id}\n                tone=\"primary\"\n                mode=\"ghost\"\n                fontSize={1}\n                disabled={readOnly || Boolean(value?.find((item) => item._key === language.id))}\n                text={language.id.toUpperCase()}\n                icon={AddIcon}\n                onClick={() => handleAddLanguage(language.id)}\n              />\n            ))}\n          </Grid>\n          <Button\n            tone=\"primary\"\n            mode=\"ghost\"\n            disabled={readOnly || (value && value?.length >= languages?.length)}\n            icon={AddIcon}\n            text={value?.length ? `Add missing languages` : `Add all languages`}\n            onClick={() => handleAddLanguage()}\n          />\n        </Stack>\n      ) : null}\n    </Stack>\n  )\n}\n","import React from 'react'\nimport styled, {css} from 'styled-components'\nimport {Box, BoxProps, Card, CardProps} from '@sanity/ui'\n\n// Wrappers required because of bug with passing down \"as\" prop\n// https://github.com/styled-components/styled-components/issues/2449\n\n// Table\nconst TableWrapper = (props = {}) => {\n  return <Box as=\"table\" {...props} />\n}\n\nconst StyledTable = styled(TableWrapper)(\n  () =>\n    css`\n      display: table;\n      width: 100%;\n\n      &:not([hidden]) {\n        display: table;\n      }\n    `\n)\n\ntype TableProps = BoxProps & {\n  children: React.ReactNode\n  style?: React.CSSProperties\n}\n\nexport function Table(props: TableProps) {\n  const {children, ...rest} = props\n\n  return <StyledTable {...rest}>{children}</StyledTable>\n}\n\n// Row\nconst RowWrapper = (props = {}) => {\n  return <Card as=\"tr\" {...props} />\n}\n\nconst StyledRow = styled(RowWrapper)(\n  () =>\n    css`\n      display: table-row;\n\n      &:not([hidden]) {\n        display: table-row;\n      }\n    `\n)\n\ntype TableRowProps = CardProps & {\n  children: React.ReactNode\n  style?: React.CSSProperties\n}\n\nexport function TableRow(props: TableRowProps) {\n  const {children, ...rest} = props\n\n  return <StyledRow {...rest}>{children}</StyledRow>\n}\n\n// Cell\nconst CellWrapper = (props = {}) => {\n  return <Box as=\"td\" {...props} />\n}\n\nconst StyledCell = styled(CellWrapper)(\n  () =>\n    css`\n      display: table-cell;\n\n      &:not([hidden]) {\n        display: table-cell;\n      }\n    `\n)\n\ntype TableCellProps = BoxProps & {\n  children: React.ReactNode\n  style?: React.CSSProperties\n}\n\nexport function TableCell(props: TableCellProps) {\n  const {children, ...rest} = props\n\n  return <StyledCell {...rest}>{children}</StyledCell>\n}\n","import {Text, Card, Stack, Code} from '@sanity/ui'\nimport React from 'react'\n\nconst schemaExample = {\n  languages: [\n    {id: 'en', title: 'English'},\n    {id: 'no', title: 'Norsk'},\n  ],\n}\n\nexport default function Feedback() {\n  return (\n    <Card tone=\"caution\" border radius={2} padding={3}>\n      <Stack space={4}>\n        <Text>\n          An array of language objects must be passed into the <code>internationalizedArray</code>{' '}\n          helper function, each with an <code>id</code> and <code>title</code> field. Example:\n        </Text>\n        <Card padding={2} border radius={2}>\n          <Code size={1} language=\"javascript\">\n            {JSON.stringify(schemaExample, null, 2)}\n          </Code>\n        </Card>\n      </Stack>\n    </Card>\n  )\n}\n","import {NodeValidation} from 'sanity/form'\nimport {CardTone} from '@sanity/ui'\n\nexport function getToneFromValidation(validations: NodeValidation[]): CardTone {\n  if (!validations.length) {\n    return `default`\n  }\n\n  const validationLevels = validations.map((v) => v.level)\n\n  if (validationLevels.includes('error')) {\n    return `critical`\n  } else if (validationLevels.includes('warning')) {\n    return `caution`\n  }\n\n  return `default`\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../"}