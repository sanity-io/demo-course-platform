{"mappings":";;AAEA,gBAAuB;IACrB,EAAE,EAAE,MAAM,CAAA;IACV,KAAK,EAAE,MAAM,CAAA;CACd,CAAA;AAED,mBAA0B,QAAQ,GAAG,QAAQ,GAAG,SAAS,GAAG,MAAM,CAAA;AAElE,mBAA0B;IACxB,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,WAAW,CAAA;IACjB,SAAS,EAAE,QAAQ,EAAE,CAAA;IACrB,KAAK,CAAC,EAAE,MAAM,CAAA;IACd,KAAK,CAAC,EAAE,MAAM,CAAA;IACd,MAAM,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM,OAAO,CAAC,CAAA;IAClC,QAAQ,CAAC,EAAE,OAAO,GAAG,CAAC,MAAM,OAAO,CAAC,CAAA;IACpC,UAAU,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,CAAA;CAC3B,CAAA;AEXD,uCAAuC,MAAM,GAAE,WAA4B,GAAG,eAAe,CAmF5F","sources":["src/src/types.ts","src/src/components/InternationalizedArrayInput.tsx","src/src/internationalizedArray.ts","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,"export * from './internationalizedArray'\n\n/**\n * Because of the complexity of the field, there's no utility currently to using the plugin framework\n * We need to register:\n * - an array which\n * - only has a single object field with\n * - a single inner field and\n * - an array of languages\n * ...this is easier with a helper function\n */\n\n// import React from 'react'\n// import {createPlugin} from 'sanity'\n\n// import InternationalizedArrayInput from './components/InternationalizedArrayInput'\n// import {PluginConfig} from './types'\n\n// const CONFIG_DEFAULT = {languages: []}\n\n// export const internationalizedArray = createPlugin<PluginConfig>((config = CONFIG_DEFAULT) => {\n//   return {\n//     name: 'sanity-plugin-internationalized-array',\n//     form: {\n//       renderInput: (inputProps: unknown, next: unknown) => {\n//         if (\n//           config.languages.length &&\n//           inputProps?.schemaType?.jsonType === 'array' &&\n//           inputProps?.schemaType?.options.i18n === true\n//         ) {\n//           if (inputProps.schemaType.of.length > 1) {\n//             return <div>Cannot have more than one field type in the array</div>\n//           }\n\n//           if (inputProps.schemaType.of[0].jsonType !== 'object') {\n//             return <div>Single Field in the Array must be an object</div>\n//           }\n\n//           if (inputProps.schemaType.of[0].fields[0].name !== 'value') {\n//             return <div>Single Field in the Object must be named `value`</div>\n//           }\n\n//           console.log({inputProps})\n//           return <InternationalizedArrayInput inputProps={inputProps} {...config} />\n//         }\n\n//         return null\n//       },\n//     },\n//   }\n// })\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../../"}